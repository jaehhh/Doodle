package kr.or.ddit.school.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.ddit.school.service.SchoolService;
import kr.or.ddit.util.ArticlePage;
import kr.or.ddit.util.service.SessionService;
import kr.or.ddit.vo.MemberVO;
import kr.or.ddit.vo.NttVO;
import kr.or.ddit.vo.SchafsSchdulVO;
import kr.or.ddit.vo.SchulVO;
import lombok.extern.slf4j.Slf4j;

@RequestMapping("/school")
@Slf4j
@Controller
public class SchoolController {
	
	@Autowired
	SchoolService schoolService;
	
	@Autowired
	String uploadFolder;
	
	@Autowired
	SessionService sessionService;
	
	//학교 공지사항 게시판 목록
	@GetMapping("/notice")
	public String notice() {
		return "school/notice";
	}
	
	//학교 교육정보 게시판 
	@GetMapping("/eduInfo")
	public String eduInfo() {
		return "school/eduInfo";
	}
		
	//자료실 게시판 조회
	@GetMapping("/dataRoom")
	public String dataRoom(Map<String,Object> map, 
		 @RequestParam(value="schulCode", required=true) String schulCode,
         @RequestParam(value="currentPage", required=false, defaultValue="1")int currentPage) {
      
      map.put("currentPage", currentPage);
      map.put("schulCode", schulCode);
      
      List<NttVO> nttVOList = this.schoolService.dataRoom(map);
      
      log.info("nttVOList>>" + nttVOList);
      
      
      return "school/dataRoom";
   }
	
	/*
    요청URI : /stud/listAjax?
    요청파라미터(json) : {"keyword":"신용","currentPage":3} 
    요청방식 : get
    
    골뱅이ResponseBody : object -> string 으로 변환하는 방식을 serialize
    required=false : 선택(map에 아무것도 들어오지 않아도 괜찮다)
    */
   @ResponseBody
   @PostMapping("/dataRoomAjax")
   public ArticlePage<NttVO> dataRoomAjax(@RequestBody(required=false) Map<String,Object> map) {
      //map : null 또는 map : {"keyword":"신용"}
      log.info("map!!! : " + map);
      // 키값 설정
      String schulCode = (String)map.get("schulCode");
      
      List<NttVO> nttVOList = this.schoolService.dataRoom(map);
      log.info("list->studVOList : " + nttVOList);      
      String currentPage = map.get("currentPage").toString();
      
      String keyword = "";
      if (map.get("keyword") == null) {
    	  keyword = "";
      } else {
    	  keyword = map.get("keyword").toString();
      }
      log.info("dataRoomAjax->keyword : " + keyword);
      
      //총 갯수
      int size = 10;
      int total = this.schoolService.dataRoomGetTotal(map);
      log.info("list->total : " + total);
      
      log.info("dataRoomAjax->keyword : " + keyword);
      
      ArticlePage<NttVO> data = new ArticlePage<NttVO>(total, Integer.parseInt(currentPage), size, nttVOList, keyword, schulCode);
      String url = "/school/dataRoom";
      data.setUrl(url);
      
      return data;
   }
   
   	//자료실 게시판 상세조회
  	@GetMapping("/dataRoomDetail")
  	public String dataRoomDetail(Model model, 
  			 @RequestParam(value="schulCode", required=true) String schulCode,
  			 @RequestParam("nttCode") String nttCode) {
  		log.info("detail->nttCode" + nttCode);
  		log.info("detail->schulCode" + schulCode);
  		
  		NttVO nttVO = this.schoolService.dataRoomDetail(nttCode);
  		log.info("detail->nttVO" + nttVO);
  		
  		//조회수
  		int result = this.schoolService.totalViews(nttVO);
  		log.info("result->result" + result);
  		
  		model.addAttribute("nttVO", nttVO);
  		model.addAttribute("result", result);
  		return "school/dataRoomDetail";
  	}
 	
  	//자료실 게시판 등록버튼
  	@GetMapping("/dataRoomCreate")
  	public String dataRoomCreate(@RequestParam(value="schulCode")String schulCode, NttVO nttVO) {
  		return "school/dataRoomCreate";
  	}
	
	//자료실 게시판 생성
	@ResponseBody
	@PostMapping("/dataRoomCreateAjax")
	public String dataRoomCreateAjax(NttVO nttVO, HttpServletRequest request) {
		log.debug("값이 잘 왔낭? {}",nttVO); // uploadFile 
		
//			MultipartFile[] jieunFiles =  nttVO.getUploadFile();
//			
//			for (MultipartFile mFile : jieunFiles) {
//				log.debug("파일명:{}", mFile.getOriginalFilename());
//			}
//			
		MemberVO memberVO = (MemberVO) request.getSession().getAttribute("USER_INFO");
		nttVO.setMberId(memberVO.getMberId());
		log.info("memberVO {}" , memberVO);   // VO값 전체 속성
		log.info("dataRoomCreate->nttVO : {}",nttVO);
		int cnt = schoolService.dataRoomCreate(nttVO);

		String result = "fail";
		if(cnt !=0 ) {
			result = nttVO.getNttCode();
			 
		}
		
		return result;
	}
	
	//자료실 게시판 삭제
	@ResponseBody
	@PostMapping("/dataRoomDeleteAjax")
	public int dataRoomDeleteAjax(@RequestBody NttVO nttVO) {
		log.info("dataRoomDeleteAjax->nttVO : " + nttVO);
		
		String nttCode = nttVO.getNttCode();
		
		//nttCode-> 1
		log.info("nttCode-> " + nttCode);
		
		int result = this.schoolService.dataRoomDeleteAjax(nttCode);
		
		log.info("dataRoomDeleteAjax->result : " + result);
		
		return result;
	}
	
	//자료실 게시판 수정
	@ResponseBody
	@PostMapping("/dataRoomUpdateAjax")
	public int dataRoomUpdateAjax(@RequestBody NttVO nttVO) {
		log.info("dataRoomUpdateAjax->nttVO : " + nttVO);
		
		String nttCode = nttVO.getNttCode();
		String nttNm = nttVO.getNttNm();
		
		log.info("nttCode랑nttNm -> " + nttCode+"랑"+nttNm);
		
		int result = this.schoolService.dataRoomUpdateAjax(nttVO);
		log.info("dataRoomUpdateAjax->result " + result);
		
		return result;
	}
	
	

	//급식
	@GetMapping("/meal")
	public String meal() {
		return "school/meal";
	}
	
	// 학사 일정
	@RequestMapping("/calendar")
	public String calendarMain() {
		return "school/academicCalendar";
	}
	
	// 학사 일정 리스트
	@ResponseBody
	@GetMapping("/scheduleSelect")
	public List<Map<String, Object>> showAllEventInUpdate() throws Exception {
		JSONObject jsonObj = new JSONObject();
		JSONArray jsonArr = new JSONArray();
		HashMap<String, Object> hash = new HashMap<>();
		
		List<SchafsSchdulVO> list = schoolService.scheduleSelect();
		log.info("list: " + list);
		
		for (SchafsSchdulVO schedule : list) {
			hash.put("scheduleCd", schedule.getSchafsSchdulCode());
			hash.put("title", schedule.getSchafsSchdulNm());
			hash.put("content", schedule.getSchafsSchdulCn());
			hash.put("start", schedule.getSchafsSchdulBgnde());
			hash.put("end", schedule.getSchafsSchdulEndde());
//			hash.put("schoolCd", schedule.getSchoolCd());
			jsonObj = new JSONObject(hash);
			jsonArr.add(jsonObj);
		}
		log.info("jsonArrCheck:{}", jsonArr);
		return jsonArr;
	}
	
	//시간표
	@GetMapping("/schedule")
	public String schedule() {
		return "school/schedule";
	}
	
	//학생(전교생) 관리 
	@GetMapping("/studentsManage")
	public String studentsManage() {
		return "school/studentsManage";
	}
	
	//학급 클래스 목록
	@GetMapping("/classList")
	public String classList() {                                
		return "school/classList";
	}
	
	/** 학교 목록 찾기 메인 화면 */
	@GetMapping("/schoolList")
	public String schoolSearchMain() {
		return "school/schoolList";
	}
	
	/** 학교 목록 불러오기 */
	@ResponseBody
	@PostMapping("/schoolListAjax")
	public ArticlePage<SchulVO> schoolListAjax(@RequestBody(required = false) Map<String, Object> map) {
		// 키값 설정
		String keyword = "";
		if (map.get("keyword") == null) {
			keyword = "";
		} else {
			keyword = map.get("keyword").toString();
		}
		int currentPage = Integer.parseInt(map.get("currentPage").toString());
		int size = Integer.parseInt(map.get("size").toString());
		
		// 총 데이터 갯수 가져오기
		int SchoolTotal = this.schoolService.schoolGetTotal(map);
		log.info("schoolListAjax -> total : " + SchoolTotal);
		log.info("String.valueOf(total) : "  + String.valueOf(SchoolTotal));
		
		// 학교 목록 가져오기
		List<SchulVO> schulVOList = this.schoolService.schoolList(map);

		// 페이지네이션
		ArticlePage<SchulVO> data = new ArticlePage<SchulVO>(SchoolTotal, currentPage, size, schulVOList, keyword);
		
		return data;
	}
	
	/** 학교 메인 화면으로 이동하는 메서드 */
	@PostMapping("/goToSchoolMain")
	public String goToSchoolMain(HttpServletRequest request, Model model, String schulNm,
			@RequestParam("schulCode") String schulCode){
//		SchulVO schulVO = new SchulVO();
//		schulVO.setSchulCode(schulCode);
//		schulVO.setSchulNm(schulNm);
		
		log.info("goToSchoolMain schulCode => ", schulCode);
		
		// 학교 메인 입장 시 학교 정보 세션에 저장
		sessionService.setSchoolSession(request, schulCode);
		
//		SchulVO schulVO = (SchulVO) request.getSession().getAttribute("SCHOOL_INFO");
		
//		model.addAttribute("schulVO", schulVO);
		
		return "school/schoolMain";
	}
		
}
