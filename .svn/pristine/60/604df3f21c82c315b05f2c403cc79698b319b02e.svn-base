<%@ page language="java" contentType="text/html; charset=UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
<%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>
<%@ taglib prefix="sec" uri="http://www.springframework.org/security/tags"%>
<style>
#FreeBoardContainer h3 {
	font-size: 2.2rem;
	text-align: center;
	margin-top: 60px;
	backdrop-filter: blur(4px);
	background-color: rgba(255, 255, 255, 1);
	border-radius: 50px;
	box-shadow: 35px 35px 68px 0px rgba(145, 192, 255, 0.5), inset -8px -8px 16px 0px rgba(145, 192, 255, 0.6), inset 0px 11px 28px 0px rgb(255, 255, 255);
	width: 370px;
	padding-top: 35px;
	padding-bottom: 35px;
	margin: auto;
	margin-top: 50px;
	margin-bottom: 40px;
}

.inputTaskAll {
	width: 1400px;
	margin: auto;
	backdrop-filter: blur(10px);
	background-color: rgba(255, 255, 255, 1);
	border-radius: 50px;
	box-shadow: 0px 35px 68px 0px rgba(145, 192, 255, 0.5), inset 0px -6px
		16px 0px rgba(145, 192, 255, 0.6), inset 0px 11px 28px 0px
		rgb(255, 255, 255);
	padding: 50px 80px;
}

.FreeBoardAll {
	width: 1400px;
	margin: auto;
	backdrop-filter: blur(10px);
	background-color: rgba(255, 255, 255, 1);
	border-radius: 50px;
	box-shadow: 0px 35px 68px 0px rgba(145, 192, 255, 0.5), inset 0px -6px
		16px 0px rgba(145, 192, 255, 0.6), inset 0px 11px 28px 0px
		rgb(255, 255, 255);
	padding: 50px 80px;
}

.FreeBoardAll .free-cont {
	border: 1px solid #ddd;
	border-radius: 10px;
	padding: 10px 20px;
	min-height: 83px;
	margin-top: 50px;
}

.FreeBoardAll .FreeTit {
	display: flex;
	justify-content: space-between;
	position: relative;
}

.FreeBoardAll .title {
	font-size: 1.8rem;
	font-weight: 700;
	margin-top: 6px;
}

#goToTaskList, #deleteBtn, #updateBtn {
	display: inline-block;
	text-align: center;
	background: #006DF0;
	padding: 15px 30px;
	font-size: 1rem;
	border: none;
	color: #fff;
	font-weight: 700;
	border-radius: 5px;
	margin-top: 30px;
	margin-bottom: 40px;
	margin-right: 15px;
}

#deleteBtn {
	background: #111;
	color: #fff;
}

#updateBtn {
	background: #666;
	color: #fff;
}

#goToTaskList:hover, #updateBtn:hover, deleteBtn:hover {
	background: #ffd77a;
	transition: all 1s ease;
	color: #333;
}

.uploadList {
	background: rgb(178 202 255/ 25%);
	backdrop-filter: blur(4px);
	-webkit-backdrop-filter: blur(4px);
	border-radius: 10px;
	border: 1px solid rgba(255, 255, 255, 0.18);
	padding: 15px 20px;
}

.uploadList ul {
	display: block;
}

.uploadList ul li {
	display: block;
	margin-bottom: 5px;
}

.uploadList ul li.fileList {
	cursor: pointer;
}

.uploadList ul li.fileList:hover {
	text-decoration: underline;
}

.btn-zone {
	margin: auto;
	text-align: center;
}

.freeInfo {
	display: flex;
	justify-content: flex-start;
	margin-top: 20px;
	padding-left: 10px;
	font-size: 1rem;
}

#feedbackContent {
	background: rgb(255 204 051/ 15%);
	width: 100%;
	padding: 20px;
	border-radius: 10px;
}

#feedbackIcon {
	width: 30px;
	height: 30px;
}

#inputFeedbackBtn {
	border: none;
	color: white;
	background: black;
	padding: 3px;
	border-radius: 5px;
	font-size: 12px;
}

#deleteFeedbackBtn {
	border: none;
	color: white;
	background: #990000;
	padding: 3px;
	border-radius: 5px;
	font-size: 12px;
	margin-left: 3px;
}

#noTaskList{
	border: 1px solid lightgray;
	border-radius: 10px;
	padding: 20px;
	text-align: center;
	font-size: 1.1rem;	
}
</style>
<link rel="stylesheet" href="/resources/css/sweetalert2.min.css">
<script src="/resources/css/sweetalert2.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sockjs-client@1/dist/sockjs.min.js"></script>
<script type="text/javascript" src="/resources/js/cjh.js"></script>
<script type="text/javascript" src="/resources/js/jquery.min.js"></script>
<!-- <script type="text/javascript" src="/resources/js/commonFunction.js"></script> -->

<script type="text/javascript">
// 전역 변수
var taskCode = "${taskVO.taskCode}";
var taskSj = "${taskVO.taskSj}";
var clasCode = "${taskVO.clasCode}";
var atchFileCode = "${taskVO.atchFileCode}";
var schulCode = "${taskVO.hrtchrVOList[0].schulCode}";
// var taskResultCode = "";

window.onload = function() {
	// 수정 버튼을 클릭했을 때 발생하는 이벤트
	document.querySelector("#updateBtn").addEventListener("click", () => {
	   location.href = "/task/taskUpdateForm?taskCode="+taskCode+"&clasCode="+clasCode;
	});
	
	// 목록으로 가기
	document.querySelector("#goToTaskList").addEventListener("click", () => {
	   location.href = "/task/taskList?taskCode="+taskCode+"&clasCode="+clasCode;
	});
};

$(function(){
	// 소켓 객체 생성
	var soc = new SockJS("/alram");
	
	// 등록일/마감일 format 처리
	var taskBeginDt = cjh.modelDateFormat("${taskVO.taskBeginDt}");
	var taskEndDt = cjh.modelDateFormat("${taskVO.taskEndDt}");
	
	var data = {
	   "taskCode":taskCode,
	   "clasCode":clasCode,
	   "mberId":"${USER_INFO.mberId}"
	};
	
	// 과제 제출 현황 리스트 출력
	$.ajax({
		url: "/task/inputTaskList",
		contentType: "application/json;charset=utf-8",
		data: JSON.stringify(data),
		type: "post",
		dataType: "json",
		beforeSend: function (xhr) {
		    xhr.setRequestHeader("${_csrf.headerName}", "${_csrf.token}");
		},
		success: function (res) {
	        console.log("inputTaskList", res);
	        var str = "";
	        
	        if(res.length == 0){
	        	str += "<div id='noTaskList'>제출된 과제가 없습니다.</div>";
	        	$("#inputTaskContainer").html(str);
	        }
			
	        // 로그인 한 아이디와 과제 체줄한 학생의 아이디가 같은 경우 -> 본인이 등록한 과제만 출력
	        if ("${USER_INFO.mberId}" == res[0].clasStdntVO.mberId) {
	            var task = res[0];
            
	            str += "<div class='inputTaskAll' style='width: auto; margin: auto; margin-bottom:50px; margin-top: 40px;'>";
	            str += "1. ";
	            str += "<a href='/task/pdfView?atchFileCode=" + task.atchFileCode + "&atchFileSn=" + task.atchFileVO.atchFileSn + "'>" + task.atchFileVO.atchFileNm + "</a> ";
	            str += task.clasStdntVO.mberNm + " ";
	            str += dateToMinFormat(task.taskPresentnDate) + " ";
	            str += "<input type='hidden' class='taskResultCode' value='" + task.taskResultCode + "'>";
	            str += "<input type='hidden' class='mberId' value='" + task.clasStdntVO.mberId + "'>";
	            str += "<input type='hidden' id='stdntNm' value='" + task.clasStdntVO.mberNm + "'>";
	            str += "<input type='hidden' id='fdbck' value='" + task.fdbck + "'>";

	            // 수정/삭제 버튼 활성화
	            str += "<input type='button' id='myTaskDeleteBtn' value='삭제'>";
	
	            // 제출한 과제에 대한 피드백이 있으면 피드백 출력
	            if (task.fdbck != null) {
	                str += "<hr>";
	                str += "<p><img src='/resources/images/classRoom/task/heart.png' id='feedbackIcon'>담임 선생님의 피드백<img src='/resources/images/classRoom/task/heart.png' id='feedbackIcon'></p>";
	                str += "<div id='feedbackContent'>" + task.fdbck + "</div>";
	            }
               
				str += "</div>";
			}
			
	       
			// 로그인 한 아이디가 담임 교사인 경우  -> 학생들이 제출한 과제 모두 출력
			if ("${USER_INFO.vwMemberAuthVOList[0].cmmnDetailCode}" == "ROLE_A14002") {
				if(res.length == 0){
        			alert("제발 떠라");
					str += "제출된 과제가 없습니다.";
				}
        	   
        	   $.each(res, function (idx, taskResultVO) {
					str += "<div class='inputTaskAll' style='width: auto; margin: auto; margin-bottom:50px; margin-top: 40px;'>";
	                str += (idx + 1) + ". ";
	                str += "<a href='/task/pdfView?atchFileCode=" + taskResultVO.atchFileCode + "&atchFileSn=" + taskResultVO.atchFileVO.atchFileSn + "'>" + taskResultVO.atchFileVO.atchFileNm + "</a> ";
	                str += taskResultVO.clasStdntVO.mberNm + " ";
	                str += dateToMinFormat(taskResultVO.taskPresentnDate) + " ";
	                str += "<input type='hidden' class='taskResultCode' value='" + taskResultVO.taskResultCode + "'>";
	                str += "<input type='hidden' class='mberId' value='" + taskResultVO.clasStdntVO.mberId + "'>";
	                str += "<input type='hidden' id='stdntNm' value='" + taskResultVO.clasStdntVO.mberNm + "'>";
	                str += "<input type='hidden' id='fdbck' value='" + taskResultVO.fdbck + "'>";

                   // 피드백 등록/수정 버튼 활성화
                   var feedbackBtnValue = taskResultVO.fdbck ? "피드백 수정" : "피드백 등록";
                   var feedbackBtnId = taskResultVO.fdbck ? "showUpdateFdbckModalBtn" : "inputFeedbackBtn";
                   var feedbackBtnColor = taskResultVO.fdbck ? "gray" : "black";
				   str += "<input type='button' id='"+feedbackBtnId+"' value='" + feedbackBtnValue + "' style='background:"+feedbackBtnColor+";'>";
               
                   // 본인이 등록한 피드백 출력
                   if (taskResultVO.fdbck != null) {
                   		str += "<input type='button' id='deleteFeedbackBtn' value='피드백 삭제'>";
                       str += "<hr>";
                       str += "<p><img src='/resources/images/classRoom/task/heart.png' id='feedbackIcon'></img>담임 선생님의 피드백<img src='/resources/images/classRoom/task/heart.png' id='feedbackIcon'></p>"
                       str += "<div id='feedbackContent'>" + taskResultVO.fdbck + "</div>";
                   
                   }
                   
                   str += "</div>";
               });

           }

           $("#inputTaskContainer").html(str);
       }
   });

   
   // 과제 제출하기
   $("#taskSubmitBtn").on("click", function(){
      var mberId = $('.mberId').val();
      
      // 업로드한 파일 가져오기
      var file = $("#inputTask")[0].files[0];
      console.log("file", file);
      
      var formData = new FormData();
      
      formData.append("taskCode", taskCode);
      formData.append("uploadFile", file);

      // 과제를 업로드하지 않은  경우 alert
      if(file == null){
         Swal.fire({
           title: '과제 제출 실패!',
           text: '파일을 업로드해 주세요.',
           icon: 'error'
         });
         return;
      }
      
      // 과제를 이미 제출한 경우 update
      if("${USER_INFO.mberId}" == mberId){
         var confirmed = confirm("이미 과제를 제출했습니다. 방금 업로드한 과제로 다시 제출할까요?");
          if (confirmed) {
            var taskResultCode = $('.taskResultCode').val();
            alert(taskResultCode);
            
            formData.append("taskResultCode", taskResultCode);
   
            $.ajax({
               url:"/task/myTaskUpdate",
               processData: false,
                contentType: false,
               data: formData,
               dataType:"json",
               type:"post",
               beforeSend:function(xhr){
                     xhr.setRequestHeader("${_csrf.headerName}","${_csrf.token}");
                },
               success: function(res){
                  alert("제출 수정 완료~");
                  location.href = "/task/taskDetail?taskCode="+taskCode+"&clasCode="+clasCode;
               }
            });
         }
      }else{ //과제를 제출하지 않은 경우 insert
         alert("과제 insert");
      
         $.ajax({
            url:"/task/inputTask",
            processData: false,
             contentType: false,
            data: formData,
            dataType:"json",
            type:"post",
            beforeSend:function(xhr){
                  xhr.setRequestHeader("${_csrf.headerName}","${_csrf.token}");
             },
            success: function(res){
               alert("제출 완료!!!!!");
               location.href = "/task/taskDetail?taskCode="+taskCode+"&clasCode="+clasCode;
            }
         });
      }
   });
   
    // myTaskUpdateBtn 버튼을 클릭했을 때 inputTask 버튼을 클릭한 것과 같은 동작을 수행하도록 설정
   $(document).on("click", "#myTaskUpdateBtn", function() {
       $("#inputTask").trigger("click");
   });
   
	// 피드백 등록 모달 띄우기
	// inputFeedbackBtn은 동적으로 생성된 버튼이기 때문에 바인딩 필요
	$(document).on("click", "#inputFeedbackBtn", function(){
		var taskResultCode = $(this).closest('.inputTaskAll').find('.taskResultCode').val();
		var stdntId = $(this).closest('.inputTaskAll').find('.mberId').val();
		var stdntNm = $(this).closest('.inputTaskAll').find('#stdntNm').val();
		var fdbck = $(this).closest('.inputTaskAll').find('#fdbck').val();
      
      $("#feedbackInsertModal").modal("show");
      
      $(".stdntNm").html(stdntNm + " 학생에게 피드백하기");
      
      // 기존 데이터에 피드백이 있으면 textarea에 출력 
       if(fdbck == "null" || fdbck == null){
          $("#fdbckArea").val("");
       }else{
          $("#fdbckArea").val(fdbck);
       }

       // 모달 창이 열릴 때 textarea에 포커스 주는 이벤트
      $("#feedbackInsertModal").on("shown.bs.modal", function(){
          $("#fdbckArea").focus();
      });
       
      // 피드백 insert 버튼에 속성 추가
       $("#feedbackInsertBtn").attr("data-taskResultCode", taskResultCode);
       $("#feedbackInsertBtn").attr("data-stdntId", stdntId);
   });
   
	// 피드백 insert + 알림 테이블 insert
	$(document).on("click", "#feedbackInsertBtn", function(){
	    var fdbck = $("#fdbckArea").val();
	    var taskResultCode = $(this).attr("data-taskResultCode"); // data-taskResultCode 속성을 읽어옴
	    var stdntId = $(this).attr("data-stdntId"); // data-taskResultCode 속성을 읽어옴
	
// 	    alert("코드 잘 받아오나?: " + taskResultCode);
// 	    alert("학생 아이디 잘 받아오나?: " + stdntId);
		taskSj = "[과제] "+taskSj;
      
		var data = {
			"taskCode":taskCode,
			"noticeSj":taskSj,
		    "taskResultCode":taskResultCode,
		    "fdbck":fdbck,
		    "schulCode":schulCode,
		    "noticeRcvId":stdntId
		};
       
       // 아무 내용도 입력하지 않을 경우
       if(fdbck == null || fdbck == ""){
          Swal.fire({
              title: '등록 실패!',
              text: '내용을 입력해 주세요.',
              icon: 'error'
         });
          
          return;
       }
       
       $.ajax({
         url: "/task/feedbackInsert",
         contentType: "application/json;charset=utf-8",
         type: "post",
         data: JSON.stringify(data),
         dataType: "json",
         beforeSend:function(xhr){
               xhr.setRequestHeader("${_csrf.headerName}","${_csrf.token}");
          },
         success: function(res){
            console.log("noticeVO", res);
            alert("피드백이 등록되었습니다.");
            
            var noticeSj = res.noticeSj;
            var noticeCn = res.noticeCn;
            var noticeTrnsmitDt = res.noticeTrnsmitDt;
            
            // 소켓 객체 생성
            var soc = new SockJS("/alram");
            
            var str = "";
            str += "<div class='single-review-st-text'>";
            str += "<img src='/resources/images/classRoom/task/taskCheck.png' alt='' style='margin-left: 15px; width: 40px; height: 40px;'>";
            str += "<div class='review-ctn-hf'>";
            str += "<a id='readNotice' href='/task/taskDetail?taskCode="+taskCode+"&clasCode="+clasCode+"'>";
            str += "<h3>"+taskSj+"</h3>";
            str += "<p>"+noticeCn+"</p>";
            str += "</a>";
            str += "</div>";
            
            var msg = str+","+stdntId+",toStdnt";

            soc.onopen = function() {
               soc.send(msg);
               alert("메세지 보냈다.");
            };
            
            location.href = "/task/taskDetail?taskCode="+taskCode+"&clasCode="+clasCode;
         }
      });
   });
   
	// 피드백 수정 모달 띄우기
	$(document).on("click", "#showUpdateFdbckModalBtn", function(){
		var taskResultCode = $(this).closest('.inputTaskAll').find('.taskResultCode').val();
		var stdntId = $(this).closest('.inputTaskAll').find('.mberId').val();
		var fdbck = $(this).closest('.inputTaskAll').find('#fdbck').val();
		var stdntNm = $(this).closest('.inputTaskAll').find('#stdntNm').val();
		 
	    $("#feedbackUpdateModal").modal("show");
	    
	    $(".stdntNm").html(stdntNm + " 학생에게 피드백하기");
	    
	    // 모달 창이 열릴 때 textarea에 포커스 주는 이벤트
	    $("#feedbackUpdateModal").on("shown.bs.modal", function(){
	        $("#updateFdbckArea").focus();
	    });

		// 기존 데이터에 피드백이 있으면 textarea에 출력 
	    if(fdbck == "null" || fdbck == null){
	       $("#updateFdbckArea").val("");
	    }else{
	       $("#updateFdbckArea").val(fdbck);
	    }
		
	    $("#feedbackUpdateBtn").attr("data-taskResultCode", taskResultCode);
	    $("#feedbackUpdateBtn").attr("data-stdntId", stdntId);
	});
   
	// 피드백 수정
    $(document).on("click", "#feedbackUpdateBtn", function(){
		var fdbck = $("#updateFdbckArea").val();
		var taskResultCode = $(this).attr("data-taskResultCode");
// 		var stdntId = $(this).attr("data-stdntId");

		var data = {
			"taskCode":taskCode,
		    "taskResultCode":taskResultCode,
		    "fdbck":fdbck,
		};

		// 아무 내용도 입력하지 않을 경우
		if(fdbck == null || fdbck == ""){
			Swal.fire({
				title: '수정 실패!',
				text: '내용을 입력해 주세요.',
				icon: 'error'
			});
          
			return;
		}
		
		$.ajax({
		    url: "/task/feedbackUpdate",
		    contentType: "application/json;charset=utf-8",
		    type: "post",
		    data: JSON.stringify(data),
		    dataType: "json",
		    beforeSend:function(xhr){
		    	xhr.setRequestHeader("${_csrf.headerName}","${_csrf.token}");
		    },
		    success: function(res){
		       console.log("res", res);
		       alert("수정됐사와요");
	           location.href = "/task/taskDetail?taskCode="+taskCode+"&clasCode="+clasCode;
		    }
		});
	});
      
	// 피드백 삭제
	$(document).on("click", "#deleteFeedbackBtn", function(){
		var taskResultCode = $(this).closest('.inputTaskAll').find('.taskResultCode').val();
		var stdntId = $(this).closest('.inputTaskAll').find('.mberId').val();
		var fdbck = "";

	    var data = {
	        "taskCode":taskCode,
	        "taskResultCode":taskResultCode,
	        "fdbck":fdbck,
	        "noticeRcvId":stdntId
	    };

	 	Swal.fire({
			title: '정말 삭제하시겠습니까?',
			text: '',
			icon: 'warning',
			
			showCancelButton: true,       	// cancel 버튼 보이기
			confirmButtonColor: '#3085d6',  // confirm 버튼 색깔 지정
			cancelButtonColor: '#d33',      // cancel 버튼 색깔 지정
			confirmButtonText: '삭제',       // confirm 버튼 텍스트 지정
			cancelButtonText: '취소',        // cancel 버튼 텍스트 지정
		}).then(result => {
	        // confirm 버튼을 눌렀을 경우,
	        if(result.isConfirmed){
            	Swal.fire('삭제가 완료되었습니다.', '', 'success');
            
            $.ajax({
	            url: "/task/feedbackDelete",
	            contentType: "application/json;charset=utf-8",
	            type: "post",
	            data: JSON.stringify(data),
	            dataType: "json",
	            beforeSend:function(xhr){
                    xhr.setRequestHeader("${_csrf.headerName}","${_csrf.token}");
            	},
				success: function(res){
					location.href = "/task/taskDetail?taskCode="+taskCode+"&clasCode="+clasCode;
            	}
            });
         };
      });
   });
   
	// 제출한 과제 삭제
	// myTaskDeleteBtn은 동적으로 생성된 버튼이기 때문에 바인딩 필요
	$(document).on("click", "#myTaskDeleteBtn", function(){
	    var taskResultCode = $(this).closest('.inputTaskAll').find('.taskResultCode').val();
	    console.log("taskResultCode: " + taskResultCode);
	    
	    Swal.fire({
	        title: '정말 삭제하시겠습니까?',
	        text: '',
	        icon: 'warning',
	        
	        showCancelButton: true,       // cancel 버튼 보이기
	        confirmButtonColor: '#3085d6',  // confirm 버튼 색깔 지정
	        cancelButtonColor: '#d33',       // cancel 버튼 색깔 지정
	        confirmButtonText: '삭제',       // confirm 버튼 텍스트 지정
	        cancelButtonText: '취소',       // cancel 버튼 텍스트 지정
		}).then(result => {
		// confirm 버튼을 눌렀을 경우,
		if(result.isConfirmed){
	        Swal.fire('삭제가 완료되었습니다.', '', 'success');
	        
	        var data = {
	           "taskResultCode":taskResultCode
	        };
            
			$.ajax({
	            url: "/task/myTaskDelete",
	            contentType: "application/json;charset=utf-8",
	            data: JSON.stringify(data),
	            type: "post",
	            dataType: "json",
	            beforeSend:function(xhr){
	                  xhr.setRequestHeader("${_csrf.headerName}","${_csrf.token}");
	             },
	            success: function(res){
	               alert("삭제 완료!!!!!");
	               location.href = "/task/taskDetail?taskCode="+taskCode+"&clasCode="+clasCode;
	            }
            });
         };
      });
   });
   
   // 게시글 삭제
   $("#deleteBtn").on("click", function(){
      if(!confirm("정말 삭제하시겠습니까?")){
         return;
      }
      
      var data = {
         "taskCode":taskCode,
         "atchFileCode":atchFileCode
      };
      
      $.ajax({
         url:"/task/taskDelete",
         contentType:"application/json;charset=utf-8",
         data:JSON.stringify(data),
         type:"post",
         dataType:"json",
         beforeSend:function(xhr){
               xhr.setRequestHeader("${_csrf.headerName}","${_csrf.token}");
          },
         success: function(res){
            alert("삭제 완료~");
            location.href = "/task/taskList?clasCode="+clasCode;
         }
      });
   });
});
</script>
<div id="FreeBoardContainer">
   <form method="post" action="/freeBoard/download" id="freeUploadFrm">
      <input type="hidden" value="" name="atchFileCode" id="atchFileCode">
      <input type="hidden" value="" name="atchFileSn" id="atchFileSn">
      <sec:csrfInput />
   </form>
   <form method="post" action="/freeBoard/updateFreeBoard" id="freeUpdateFrm">
      <input type="hidden" value="" name="atchFileCode" id="atchFileCode3">
      <input type="hidden" value="" name="nttCode" id="nttCode2">
      <input type="hidden" value="" name="nttNm" id="nttNm2">
      <input type="hidden" value="" name="nttCn" id="nttCn2">
      <sec:csrfInput />
   </form>
   <h3>
      <img src="/resources/images/classRoom/task/taskCheck.png" style="width:50px; display:inline-block; vertical-align:middel;">
         과제 게시판
      <img src="/resources/images/classRoom/task/pencil.png" style="width:50px; display:inline-block; vertical-align:middel;">      
   </h3>
      <div class="FreeBoardAll" style="width: 1400px; margin: auto; margin-bottom:50px; min-height:530px;">
         <div class="FreeTit">
            <input type="text" class="form-control input-sm" style="width:95%;border:none;background: none;height: 50px;font-size: 1.4rem;display: inline-block;vertical-align: middle; margin-bottom:6px;" 
            name="taskSj" id="taskSj" value="${taskVO.taskSj}" readonly>
            <img src="/resources/images/classRoom/freeBrd/line.png" style="position: absolute;left: 0px;top: 10px;z-index: -1;">
         </div>
         <div class="freeInfo">
            <span>
               작성자: ${taskVO.hrtchrVOList[0].memberVOList[0].mberNm}
            </span>
            <span>
               과제 등록일:
               <fmt:formatDate value="${taskVO.taskBeginDt}" pattern="yyyy-MM-dd" /> |
               과제 마감일:
               <fmt:formatDate value="${taskVO.taskEndDt}" pattern="yyyy-MM-dd" />
            </span>
         </div>
         <div class="mb-3" style="display:flex;margin-top:20px;">
            <img src="/resources/images/classRoom/freeBrd/freeFile.png" style="width:40px; display:inline-block;">
            <span style="font-size:1.05rem; display: inline-block; vertical-align: middle;line-height: 2.5;">첨부파일</span> 
            <c:if test="${fn:length(atchFileVOList) > 0}">
            </c:if>
         </div>
         <div class="uploadList">
            <ul>
               <c:choose>
                  <c:when test="${fn:length(atchFileList) > 0}">
                     <c:forEach var="atchFileVO" items="${atchFileList}" varStatus="status">
                           <li class="fileList" data-atch-file-code ="${atchVO.atchFileCode}" 
                           data-atch-file-sn="${atchFileVO.atchFileSn}" data-atch-file-nm="${atchFileVO.atchFileNm}">
                              <img alt="${atchFileVO.atchFileNm}파일 다운로드" src="/resources/images/classRoom/freeBrd/free-download-solid.png" style="width:15px; height: 15px; margin-bottom:3px;"> 
                              <a href="/task/pdfView?atchFileCode=${atchFileVO.atchFileCode}&atchFileSn=${atchFileVO.atchFileSn}">${atchFileVO.atchFileNm}</a>
                           </li>
                     </c:forEach>
                  </c:when>
                  <c:otherwise>
                     <li>
                        <p style="margin-bottom:0px;">
                           <img alt="파일이 미존재 시 파일 아이콘 " src="/resources/images/classRoom/freeBrd/free-file-solid.png" 
                           style="width: 13px;margin-right: 2px; margin-bottom: 3px;">
                           첨부된 파일이 없습니다.
                        </p>
                     </li>
                  </c:otherwise>
               </c:choose>
            </ul>
         </div>
      <div class="free-cont">
         ​​​​​​​​<div id="smarteditor">
            <div id="taskCn" style="width:100%;" style="border:1px solid #ddd;">
               ${taskVO.taskCn}
            </div>
         </div>
      </div>
      <div class="btn-zone">
         ​​​​​​​​<input type="button" value="목록" id="goToTaskList"/>
         <c:if test="${USER_INFO.mberId == taskVO.hrtchrVOList[0].mberId || USER_INFO.vwMemberAuthVOList[0].cmmnDetailCode == 'ROLE_A14002'}">
            ​​​​​​​​<input type="button" value="수정" id="updateBtn"/> 
            ​​​​​​​​<input type="button" value="삭제" id="deleteBtn"/>
         </c:if>
      </div>
      
      <div class="FreeTit">
         <p class="form-control input-sm" style="text-align:center; width:100%;border:none;background: none;height: 50px;font-size: 1.4rem;display: inline-block;vertical-align: middle; margin-bottom:6px;">
            과제 제출 현황
         </p>
      </div>
      <div>
         <!-- 로그인한 회원이 학생인 경우 과제 제출란 출력 -->
         <c:if test="${USER_INFO.vwMemberAuthVOList[0].cmmnDetailCode == 'ROLE_A01001'}">
            <div class="mb-3" style="display:flex;margin-top:20px;">
               <img src="/resources/images/classRoom/freeBrd/freeFile.png" style="width:40px; display:inline-block;">
               <span style="font-size:1.05rem; display: inline-block; vertical-align: middle;line-height: 2.5;">첨부파일</span> 
            </div>
            <form action="/task/inputTask" method="post">
               <div class="uploadList">
                  <input type="file" id="inputTask" name="inputTask">
               </div>
               <div style="display:flex; justify-content: center; padding: 20px;">
                  <input type="button" value="제출하기" id="taskSubmitBtn" class="btn btn-primary waves-effect waves-light">
               </div>
            </form>
         </c:if>
      </div>
      <div id="inputTaskContainer" style="margin-bottom: 50px;">
<!--          <div class="FreeBoardAll" style="width: auto; margin: auto; margin-bottom:50px; margin-top: 40px;"> -->
<!--             <p></p> -->
<!--          </div> -->
      </div>
   </div>
</div>

<div id="FreeBoardContainer">

</div>

<!-- 피드백을 등록하는 모달 -->
<div id="feedbackInsertModal"
   class="modal modal-edu-general default-popup-PrimaryModal fade"
   role="dialog">
   <div class="modal-dialog">
      <div class="modal-content">
         <div class="modal-close-area modal-close-df">
            <a class="close" data-dismiss="modal" href="#">
            <i class="fa fa-close"></i></a>
         </div>
         <div class="modal-body">
            <h3>피드백 등록</h3>
            <hr>
            <div class="form-group res-mg-t-15">
               <p class="stdntNm"></p>
                    <textarea id="fdbckArea" name="fdbckArea" placeholder="내용을 입력해 주세요" style="resize: none; height: 220px;"></textarea>
                </div>
         <input type="button" value="등록" id="feedbackInsertBtn" class="btn btn-primary waves-effect waves-light">
         </div>
      </div>
   </div>
</div>

<!-- 피드백을 수정하는 모달 -->
<div id="feedbackUpdateModal"
   class="modal modal-edu-general default-popup-PrimaryModal fade"
   role="dialog">
   <div class="modal-dialog">
      <div class="modal-content">
         <div class="modal-close-area modal-close-df">
            <a class="close" data-dismiss="modal" href="#">
            <i class="fa fa-close"></i></a>
         </div>
         <div class="modal-body">
            <h3>피드백 수정</h3>
            <hr>
            <div class="form-group res-mg-t-15">
               <p class="stdntNm"></p>
                    <textarea id="updateFdbckArea" name="updateFdbckArea" placeholder="내용을 입력해 주세요" style="resize: none; height: 220px;"></textarea>
                </div>
         <input type="button" value="수정" id="feedbackUpdateBtn" class="btn btn-primary waves-effect waves-light">
         </div>
      </div>
   </div>
</div>